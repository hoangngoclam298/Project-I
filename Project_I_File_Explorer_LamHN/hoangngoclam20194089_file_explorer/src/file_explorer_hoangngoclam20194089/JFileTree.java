/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package file_explorer_hoangngoclam20194089;

import java.io.File;
import java.io.IOException;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import javax.swing.SwingUtilities;

/**
 *
 * @author STD_DELL
 */
public class JFileTree extends javax.swing.JFrame {

    FileTreeModel treePC;
    public int count = 0;
    File currentFile;
    File copyFile;
    File cutFile;
    File pasteFile;
    DefaultMutableTreeNode currentNode;
    DefaultMutableTreeNode cutNode;
    Stack<File> backStack = new Stack<File>(),
          forwardStack = new Stack<File>();
    boolean checkFile;
    boolean checkCopy = false;
    boolean checkCut = false;
    /**
     * Creates new form JFileTree
     */
    
    public JFileTree() {
        initComponents();
        treePC = new FileTreeModel();
        this.jFileTree.setModel(treePC);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrameCreate = new javax.swing.JFrame();
        jRadioButtonFile = new javax.swing.JRadioButton();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldExtension = new javax.swing.JTextField();
        jLabelName = new javax.swing.JLabel();
        jLabelExtension = new javax.swing.JLabel();
        jButtonCreate = new javax.swing.JButton();
        jRadioButtonFolder = new javax.swing.JRadioButton();
        jScrollShowInfoCreateFile = new javax.swing.JScrollPane();
        jTextAreaShowCreate = new javax.swing.JTextArea();
        buttonGroupChoose = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jMenuItemRename = new javax.swing.JMenuItem();
        jFrameHelp = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaHelp = new javax.swing.JTextArea();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jFileTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jButtonBack = new javax.swing.JButton();
        jButtonForward = new javax.swing.JButton();
        jButtonNewCreate = new javax.swing.JButton();
        jButtonHelp = new javax.swing.JButton();

        jFrameCreate.setTitle("Tạo tập tin hoặc thư mục mới");
        jFrameCreate.setMinimumSize(new java.awt.Dimension(400, 300));

        buttonGroupChoose.add(jRadioButtonFile);
        jRadioButtonFile.setSelected(true);
        jRadioButtonFile.setText("Tạo tập tin");
        jRadioButtonFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFileActionPerformed(evt);
            }
        });

        jLabelName.setText("Tên");

        jLabelExtension.setText("Mở rộng");

        jButtonCreate.setText("Tạo");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });

        buttonGroupChoose.add(jRadioButtonFolder);
        jRadioButtonFolder.setText("Tạo thư mục");
        jRadioButtonFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFolderActionPerformed(evt);
            }
        });

        jTextAreaShowCreate.setColumns(20);
        jTextAreaShowCreate.setRows(5);
        jScrollShowInfoCreateFile.setViewportView(jTextAreaShowCreate);

        javax.swing.GroupLayout jFrameCreateLayout = new javax.swing.GroupLayout(jFrameCreate.getContentPane());
        jFrameCreate.getContentPane().setLayout(jFrameCreateLayout);
        jFrameCreateLayout.setHorizontalGroup(
            jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameCreateLayout.createSequentialGroup()
                .addGroup(jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameCreateLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jFrameCreateLayout.createSequentialGroup()
                                .addComponent(jLabelExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jFrameCreateLayout.createSequentialGroup()
                                .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jFrameCreateLayout.createSequentialGroup()
                                        .addComponent(jRadioButtonFile)
                                        .addGap(43, 43, 43)
                                        .addComponent(jRadioButtonFolder))
                                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(jFrameCreateLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollShowInfoCreateFile)))
                .addContainerGap())
            .addGroup(jFrameCreateLayout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jButtonCreate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrameCreateLayout.setVerticalGroup(
            jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameCreateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonFile)
                    .addComponent(jRadioButtonFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jFrameCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollShowInfoCreateFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemCopy);

        jMenuItemCut.setText("Cut");
        jMenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCutActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemCut);

        jMenuItemPaste.setText("Paste");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemPaste);

        jMenuItemDelete.setText("Delete");
        jMenuItemDelete.setToolTipText("");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemDelete);

        jMenuItemRename.setText("Rename");
        jMenuItemRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRenameActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemRename);

        jFrameHelp.setTitle("Hướng dẫn sử dụng");
        jFrameHelp.setMinimumSize(new java.awt.Dimension(500, 300));

        jTextAreaHelp.setColumns(20);
        jTextAreaHelp.setRows(5);
        jScrollPane3.setViewportView(jTextAreaHelp);

        javax.swing.GroupLayout jFrameHelpLayout = new javax.swing.GroupLayout(jFrameHelp.getContentPane());
        jFrameHelp.getContentPane().setLayout(jFrameHelpLayout);
        jFrameHelpLayout.setHorizontalGroup(
            jFrameHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        jFrameHelpLayout.setVerticalGroup(
            jFrameHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Explorer ");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(360, 500));

        jFileTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFileTreeMouseClicked(evt);
            }
        });
        jFileTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jFileTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jFileTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane2.setViewportView(jTextArea);

        jSplitPane1.setRightComponent(jScrollPane2);

        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonForward.setText("Forward");
        jButtonForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonForwardActionPerformed(evt);
            }
        });

        jButtonNewCreate.setText("Create file or folder");
        jButtonNewCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewCreateActionPerformed(evt);
            }
        });

        jButtonHelp.setText("Help");
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonBack)
                .addGap(28, 28, 28)
                .addComponent(jButtonForward)
                .addGap(33, 33, 33)
                .addComponent(jButtonNewCreate)
                .addGap(27, 27, 27)
                .addComponent(jButtonHelp)
                .addContainerGap(603, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBack)
                    .addComponent(jButtonForward)
                    .addComponent(jButtonNewCreate)
                    .addComponent(jButtonHelp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showInfo(File file){
        FileInformations info = new FileInformations();
        this.jTextArea.setText(info.ShowInfoFile(file));
    }

    public boolean checkName(File parent, File child){
        File[] list = parent.listFiles();
        if(list == null) return true;
        for(File tmp:list){
            if(tmp.getName().equals(child.getName())) return false;
        }
        return true;
    }

    private void jFileTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jFileTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jFileTree.getLastSelectedPathComponent();
        if(node == null) return;
        File file = (File) node.getUserObject();
        if(count != 0 ){
            backStack.add(currentFile);
        }
        count++;
        currentNode = node;
        currentFile = file;
        while (!forwardStack.empty()) {
            forwardStack.pop();
        }
        showInfo(currentFile);
    }//GEN-LAST:event_jFileTreeValueChanged

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        if(backStack.empty()){
            JOptionPane.showMessageDialog(rootPane, "Can't back !" );
        }
        else {
            forwardStack.add(currentFile);
            currentFile = backStack.pop();
            showInfo(currentFile);
        }
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonForwardActionPerformed
        // TODO add your handling code here:
        if(forwardStack.empty()){
            JOptionPane.showMessageDialog(rootPane, "Can't forward !");
        }
        else {
            backStack.add(currentFile);
            currentFile = forwardStack.pop();
            showInfo(currentFile);
        }
    }//GEN-LAST:event_jButtonForwardActionPerformed

    private void jButtonNewCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewCreateActionPerformed
        // TODO add your handling code here:
        if(count == 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn thư mục tạo file");
        }
        else if(!currentFile.isDirectory()){
            JOptionPane.showMessageDialog(rootPane, "Chỉ có thể tạo ở thư mục !");
        }
        else {
            jTextFieldName.setText("");
            jTextFieldExtension.setText("");
            jTextAreaShowCreate.setText("");
            jFrameCreate.setVisible(true);
        }
    }//GEN-LAST:event_jButtonNewCreateActionPerformed

    private void jRadioButtonFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFileActionPerformed
        // TODO add your handling code here:
        checkFile = true;
        jLabelExtension.setVisible(true);
        jTextFieldExtension.setVisible(true);
    }//GEN-LAST:event_jRadioButtonFileActionPerformed

    private void jRadioButtonFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFolderActionPerformed
        // TODO add your handling code here:
        checkFile = false;
        jLabelExtension.setVisible(false);
        jTextFieldExtension.setVisible(false);
    }//GEN-LAST:event_jRadioButtonFolderActionPerformed

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        // TODO add your handling code here:
        if(jRadioButtonFile.isSelected()){
            File newFile = new File(currentFile.toString() + File.separator + jTextFieldName.getText() + "." + jTextFieldExtension.getText());
            if(!checkName(currentFile,newFile)){
                JOptionPane.showMessageDialog(rootPane, "Thất bại! Trùng tên !");
            }
            else try {
                if(newFile.createNewFile()){
                    DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newFile);
                    currentNode.add(newNode);
                    treePC.tree.reload();
                    StringBuilder sb = new StringBuilder();
                    sb.append("Tạo thành công ! \nThư mục mẹ: ").append(currentFile.toString());
                    sb.append("\nTên tập tin mới: ").append(jTextFieldName.getText()).append(".").append(jTextFieldExtension.getText());
                    jTextAreaShowCreate.setText(sb.toString());
                }
                else{
                    JOptionPane.showMessageDialog(rootPane, "Tạo tập tin thất bại !");
                    return;
                }
            } catch (IOException ex) {
                Logger.getLogger(JFileTree.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(jRadioButtonFolder.isSelected()){
            File newFile = new File(currentFile.toString() + File.separator + jTextFieldName.getText());
            if(!checkName(currentFile,newFile)){
                JOptionPane.showMessageDialog(rootPane, "Thất bại! Trùng tên !");
            }
            else {
                newFile.mkdir();
                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newFile);
                currentNode.add(newNode);
                treePC.tree.reload();
                StringBuilder sb = new StringBuilder();
                sb.append("Tạo thành công ! \nThư mục mẹ: ").append(currentFile.toString());
                sb.append("\nTên thư mục mới: ").append(jTextFieldName.getText());
                jTextAreaShowCreate.setText(sb.toString());
            }
        }
    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jFileTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFileTreeMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isRightMouseButton(evt)){
            jPopupMenu.show(this, evt.getXOnScreen(), evt.getYOnScreen());
        }
    }//GEN-LAST:event_jFileTreeMouseClicked

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        // TODO add your handling code here:
        if(checkCut) checkCut = false;
        copyFile = currentFile;
        checkCopy = true;
        JOptionPane.showMessageDialog(rootPane, "Sao chép " + copyFile.toString() + "\nChọn thư mục đến");
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCutActionPerformed
        // TODO add your handling code here:
        if(checkCopy) checkCopy = false;
        cutFile = currentFile;
        cutNode = currentNode;
        checkCut = true;
        JOptionPane.showMessageDialog(rootPane, "Di chuyển " + cutFile.toString() + "\nChọn thư mục đến");
    }//GEN-LAST:event_jMenuItemCutActionPerformed

    private void copyFileOrFolder(File copyF,File pasteF){
        if(copyF.isDirectory()){
            if(!pasteF.exists()){
                pasteF.mkdir();
            }
            File[] children = copyF.listFiles();
            if(children == null) return;
            for(File child:children){
                File copyChildF = new File(copyF,child.getName());
                File pasteChildF = new File(pasteF,child.getName());
                copyFileOrFolder(copyChildF,pasteChildF);
            }
        }
        else{
            try {
                Files.copy(copyF.toPath(),pasteF.toPath(),StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private boolean deleteF(File file){
        if(file.isDirectory()){
            File[] children = file.listFiles();
            if(children != null){
                for(File child:children){
                    if(!deleteF(child)) return false;
                }
            }
        }
        return file.delete();
    }

    private void cutFileOrFolder(File cutF,File pasteF){
        copyFileOrFolder(cutF,pasteF);
        if(!deleteF(cutF)) JOptionPane.showMessageDialog(rootPane,"Di chuyển thất bại");
    }

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        // TODO add your handling code here:
        if(checkCopy){
            if(!currentFile.isDirectory()){
                JOptionPane.showMessageDialog(rootPane, "Không được dán vào tập tin !\nHãy chọn thư mục đến");
                return;
            }
            pasteFile = new File(currentFile.toString() + File.separator + copyFile.getName());
            if(!checkName(currentFile,pasteFile)){
                JOptionPane.showMessageDialog(rootPane, "Thất bại! Trùng tên !");
                return;
            }
            copyFileOrFolder(copyFile,pasteFile);
            checkCopy = false;
            DefaultMutableTreeNode pasteNode = new DefaultMutableTreeNode(pasteFile);
            treePC.buildChild(pasteFile,pasteNode);
            currentNode.add(pasteNode);
            treePC.tree.reload();
            JOptionPane.showMessageDialog(rootPane, "Sao chép thành công !");
        }
        else if(checkCut){
            if(!currentFile.isDirectory()){
                JOptionPane.showMessageDialog(rootPane, "Không được dán vào tập tin !\nHãy chọn thư mục đến");
                return;
            }
            pasteFile = new File(currentFile.toString() + File.separator + cutFile.getName());
            if(!checkName(currentFile,pasteFile)){
                JOptionPane.showMessageDialog(rootPane, "Thất bại! Trùng tên !");
                return;
            }
            cutFileOrFolder(cutFile,pasteFile);
            checkCut = false;
            DefaultMutableTreeNode pasteNode = new DefaultMutableTreeNode(pasteFile);
            treePC.buildChild(pasteFile,pasteNode);
            currentNode.add(pasteNode);
            cutNode.removeFromParent();
            treePC.tree.reload();
            JOptionPane.showMessageDialog(rootPane, "Di chuyển thành công !");
        }
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    private void jMenuItemRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRenameActionPerformed
        // TODO add your handling code here:
        String newName = JOptionPane.showInputDialog(rootPane, "Đổi tên: " + currentFile.toString());
        if(newName == null) {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng nhập tên !");
            return;
        }
        File newFile = new File(currentFile.getParent() + File.separator + newName);
        if(!checkName(currentFile.getParentFile(),newFile)){
            JOptionPane.showMessageDialog(rootPane, "Thất bại! Trùng tên !");
        }
        else {
            currentFile.renameTo(newFile);
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newFile);
            treePC.buildChild(newFile,newNode);
            DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) currentNode.getParent();
            parentNode.add(newNode);
            currentNode.removeFromParent();
            treePC.tree.reload();
            JOptionPane.showMessageDialog(rootPane, "Đổi tên thành công !");
        }
    }//GEN-LAST:event_jMenuItemRenameActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        // TODO add your handling code here:
        if(deleteF(currentFile)){
            currentNode.removeFromParent();
            treePC.tree.reload();
            JOptionPane.showMessageDialog(rootPane, "Xóa thành công !");
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Xóa thất bại !");
        }
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        // TODO add your handling code here:
        StringBuilder sb = new StringBuilder();
        sb.append("  - Xem các tập tin, thư mục bằng cách click vào nó");
        sb.append("\n  - Xem các thư mục con bằng cách doucle click vào thư mục mẹ");
        sb.append("\n  - Có nút back và forward để quay lại và tiến lên");
        sb.append("\n  - Chọn thư mục và ấn Create file or folder để tạo mới tập tin hoặc thư mục");
        sb.append("\n  - Chọn tập tin hoặc thư mục và click chuột phải sẽ hiện thị 5 chức năng: ");
        sb.append("\n     1. Copy\n     2.Cut\n     3.Paste\n     4.Delete\n     5.Rename");
        sb.append("\n  Lưu ý: Khi thực hiện các thao tác trên hãy nhớ click vào tập tin hoặc thư mục trước");
        sb.append("\n  - Sau khi Copy hoặc Cut hãy click vào thư mục đến và chọn Paste");
        sb.append("\n  ");

        jTextAreaHelp.setText(sb.toString());
        jFrameHelp.setVisible(true);
    }//GEN-LAST:event_jButtonHelpActionPerformed
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JFileTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JFileTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JFileTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JFileTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new JFileTree().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupChoose;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonForward;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonNewCreate;
    private javax.swing.JTree jFileTree;
    private javax.swing.JFrame jFrameCreate;
    private javax.swing.JFrame jFrameHelp;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelExtension;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemRename;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JRadioButton jRadioButtonFile;
    private javax.swing.JRadioButton jRadioButtonFolder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollShowInfoCreateFile;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTextArea jTextAreaHelp;
    private javax.swing.JTextArea jTextAreaShowCreate;
    private javax.swing.JTextField jTextFieldExtension;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables
}
